// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CommentLike {
  id        String @id @default(cuid())
  commentId String @map("comment_id")
  userId    String @map("user_id")


  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@map("commentLikes")
}

model Like {
  id      String @id @default(cuid())
  userId  String @map("user_id")
  tweetId String @map("tweet_id")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@map("likes")
}

model Comment {
  id           String        @id @default(cuid())
  userId       String        @map("user_id")
  tweetId      String        @map("tweet_id")
  comment      String        @db.VarChar
  timestamp    DateTime      @default(now()) @db.Timestamptz(6)
  commentLikes CommentLike[]

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Tweet {
  id        String    @id @default(cuid())
  text      String    @db.VarChar
  image     String?   @db.VarChar
  userId    String    @map("user_id")
  timestamp DateTime  @default(now()) @db.Timestamptz(6)
  comments  Comment[]
  likes     Like[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tweets")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique @db.VarChar
  image         String?   @db.VarChar
  tag           String?   @db.VarChar
  name          String?
  emailVerified DateTime?
  tweets        Tweet[]
  comments      Comment[]
  likes         Like[]
  sessions      Session[]
  accounts      Account[]



  @@map("users")
  CommentLike CommentLike[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
